// <auto-generated />
using System;
using HungryCake.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HungryCake.API.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("HungryCake.API.Models.Column", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DateTimeFormat");

                    b.Property<int>("GridId");

                    b.Property<int>("MaxItems");

                    b.Property<string>("Name");

                    b.Property<bool>("ShowDateTime");

                    b.Property<bool>("ShowImage");

                    b.Property<bool>("ShowRollbar");

                    b.Property<bool>("ShowSummary");

                    b.Property<int>("xPosition");

                    b.Property<int>("yPosition");

                    b.HasKey("Id");

                    b.HasIndex("GridId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnHtml", b =>
                {
                    b.Property<int>("ColumnId");

                    b.Property<int>("FeedHtmlId");

                    b.Property<int>("FilterId");

                    b.HasKey("ColumnId", "FeedHtmlId");

                    b.HasIndex("FeedHtmlId");

                    b.HasIndex("FilterId");

                    b.ToTable("ColumnHtml");
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnReddit", b =>
                {
                    b.Property<int>("ColumnId");

                    b.Property<int>("FeedRedditId");

                    b.Property<int>("FilterId");

                    b.Property<int>("TopRange");

                    b.HasKey("ColumnId", "FeedRedditId");

                    b.HasIndex("FeedRedditId");

                    b.HasIndex("FilterId");

                    b.ToTable("ColumnReddit");
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnRss", b =>
                {
                    b.Property<int>("ColumnId");

                    b.Property<int>("FeedRssId");

                    b.Property<int>("FilterId");

                    b.HasKey("ColumnId", "FeedRssId");

                    b.HasIndex("FeedRssId");

                    b.HasIndex("FilterId");

                    b.ToTable("ColumnRss");
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnTwitter", b =>
                {
                    b.Property<int>("ColumnId");

                    b.Property<int>("FeedTwitterId");

                    b.Property<int>("FilterId");

                    b.HasKey("ColumnId", "FeedTwitterId");

                    b.HasIndex("FeedTwitterId");

                    b.HasIndex("FilterId");

                    b.ToTable("ColumnTwitter");
                });

            modelBuilder.Entity("HungryCake.API.Models.FeedHtml", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("HasPayWall");

                    b.Property<byte[]>("Icon");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastFail");

                    b.Property<DateTime>("LastSuccess");

                    b.Property<bool>("LoadedLastTime");

                    b.Property<string>("Name");

                    b.Property<string>("PatternLink");

                    b.Property<string>("PatternTitle");

                    b.Property<string>("UrlSite");

                    b.HasKey("Id");

                    b.ToTable("FeedsHtml");
                });

            modelBuilder.Entity("HungryCake.API.Models.FeedReddit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<byte[]>("Icon");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastFail");

                    b.Property<DateTime>("LastSuccess");

                    b.Property<string>("reddit");

                    b.HasKey("Id");

                    b.ToTable("FeedsReddit");
                });

            modelBuilder.Entity("HungryCake.API.Models.FeedRss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("HasPayWall");

                    b.Property<byte[]>("Icon");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastFail");

                    b.Property<DateTime>("LastSuccess");

                    b.Property<string>("Name");

                    b.Property<string>("UrlRss");

                    b.Property<string>("UrlSite");

                    b.HasKey("Id");

                    b.ToTable("FeedsRss");
                });

            modelBuilder.Entity("HungryCake.API.Models.FeedTwitter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<byte[]>("Icon");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("LastFail");

                    b.Property<DateTime>("LastSuccess");

                    b.Property<string>("Twitter");

                    b.HasKey("Id");

                    b.ToTable("FeedsTwitter");
                });

            modelBuilder.Entity("HungryCake.API.Models.Filter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CaseSensitive");

                    b.Property<string>("Content");

                    b.Property<int>("Percentage");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Filter");
                });

            modelBuilder.Entity("HungryCake.API.Models.Grid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FontSize");

                    b.Property<string>("Name");

                    b.Property<int>("QuantColumns");

                    b.Property<int>("QuantRows");

                    b.Property<int>("RowHeightLimit");

                    b.Property<int>("Template");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Grids");
                });

            modelBuilder.Entity("HungryCake.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int>("Level");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HungryCake.API.Models.Column", b =>
                {
                    b.HasOne("HungryCake.API.Models.Grid", "Grid")
                        .WithMany("Columns")
                        .HasForeignKey("GridId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnHtml", b =>
                {
                    b.HasOne("HungryCake.API.Models.Column", "Column")
                        .WithMany("FeedsHtml")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.FeedHtml", "FeedHtml")
                        .WithMany("ColumnsHtml")
                        .HasForeignKey("FeedHtmlId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.Filter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnReddit", b =>
                {
                    b.HasOne("HungryCake.API.Models.Column", "Column")
                        .WithMany("FeedsReddit")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.FeedReddit", "FeedReddit")
                        .WithMany("ColumnsReddit")
                        .HasForeignKey("FeedRedditId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.Filter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnRss", b =>
                {
                    b.HasOne("HungryCake.API.Models.Column", "Column")
                        .WithMany("FeedsRss")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.FeedRss", "FeedRss")
                        .WithMany("ColumnsRss")
                        .HasForeignKey("FeedRssId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.Filter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HungryCake.API.Models.ColumnTwitter", b =>
                {
                    b.HasOne("HungryCake.API.Models.Column", "Column")
                        .WithMany("FeedsTwitter")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.FeedTwitter", "FeedTwitter")
                        .WithMany("ColumnsTwitter")
                        .HasForeignKey("FeedTwitterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HungryCake.API.Models.Filter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HungryCake.API.Models.Filter", b =>
                {
                    b.HasOne("HungryCake.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HungryCake.API.Models.Grid", b =>
                {
                    b.HasOne("HungryCake.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
